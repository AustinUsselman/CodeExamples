package Juice.RaiseYourJuice.GravityPlacement;

import java.util.ArrayList;
import java.util.List;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;

public class GravityBlocks extends JavaPlugin implements Listener, CommandExecutor {
  private BukkitTask task;
  
  public void onEnable() {
    getServer().getPluginManager().registerEvents(this, (Plugin)this);
  }
  
  public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
    if (command.getName().equalsIgnoreCase("gravityblocks")) {
      if (args.length != 1) {
        sender.sendMessage(ChatColor.RED + "Invalid usage. Please use:");
        sender.sendMessage(ChatColor.RED + "/gravityblocks start");
        sender.sendMessage(ChatColor.RED + "/gravityblocks stop");
        return false;
      } 
      if (args[0].equalsIgnoreCase("start")) {
        startGravity();
        sender.sendMessage(ChatColor.GREEN + "Gravity blocks started.");
      } else if (args[0].equalsIgnoreCase("stop")) {
        stopGravity();
        sender.sendMessage(ChatColor.GREEN + "Gravity blocks stopped.");
      } else {
        sender.sendMessage(ChatColor.RED + "Invalid usage. Please use:");
        sender.sendMessage(ChatColor.RED + "/gravityblocks start");
        sender.sendMessage(ChatColor.RED + "/gravityblocks stop");
        return false;
      } 
      return true;
    } 
    return false;
  }
  
  @EventHandler(ignoreCancelled = true)
  public void onBlockPlaceEvent(BlockPlaceEvent event) {
    if (this.task != null && !this.task.isCancelled())
      checkGravity(event.getBlockPlaced()); 
  }
  
  private void checkGravity(Block block) {
    if (!block.getRelative(BlockFace.DOWN).getType().isSolid()) {
      if (block.getType() == Material.OBSIDIAN || block.getType() == Material.BEDROCK)
        return; 
      Location location = block.getLocation().clone().add(0.5D, 0.0D, 0.5D);
      block.getWorld().spawnFallingBlock(location, block.getType().createBlockData());
      block.setType(Material.AIR);
    } 
  }
  
  private void checkPlayer(Player player) {
    for (Location location : generateCircle(player.getLocation().clone().add(0.0D, -14.0D, 0.0D), 7, 29, false, false)) {
      if (!location.getBlock().getType().isSolid())
        continue; 
      checkGravity(location.getBlock());
    } 
  }
  
  private void startGravity() {
    this.task = (new BukkitRunnable() {
        public void run() {
          for (Player onlinePlayer : Bukkit.getOnlinePlayers())
            GravityBlocks.this.checkPlayer(onlinePlayer); 
        }
      }).runTaskTimer((Plugin)this, 0L, 3L);
  }
  
  private void stopGravity() {
    if (this.task != null) {
      this.task.cancel();
      this.task = null;
    } 
  }
  
  public static List<Location> generateCircle(Location centre, int radius, int height, boolean hollow, boolean sphere) {
      List<Location> circleblocks = new ArrayList<Location>();
      int cx = centre.getBlockX();
      int cy = centre.getBlockY();
      int cz = centre.getBlockZ();
      for (int x = cx - radius; x <= cx + radius; x++)
          for (int z = cz - radius; z <= cz + radius; z++)
              for (int y = (sphere ? cy - radius : cy); y < (sphere ? cy + radius : cy + height); y++) {
                  double dist = (cx - x) * (cx - x) + (cz - z) * (cz - z) + (sphere ? (cy - y) * (cy - y) : 0);
                  if (dist < radius * radius && !(hollow && dist < (radius - 1) * (radius - 1))) {
                      Location l = new Location(centre.getWorld(), x, y , z);
                      circleblocks.add(l);
                  }
              }

      return circleblocks;
  }
}
